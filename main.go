package main

import (
	"bytes"         // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–æ–≤—ã–º–∏ –±—É—Ñ–µ—Ä–∞–º–∏(–Ω—É–∂–Ω–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞)
	"encoding/json" // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON –∏ –æ–±—Ä–∞—Ç–Ω–æ
	"fmt"           // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
	"io/ioutil"     // —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	"log"
	"net/http" // –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å http- –∑–∞–ø—Ä–æ—Å—ã
	"os"       // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type Message struct {
	Role string `json:"role"` // –∫—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç : "user", "system", "assistant"
	Text string `json:"text"` // —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
}

type CompletionOptions struct {
	Stream      bool    `json:"stream"`
	Temperature float64 `json:"temperature"`
	MaxTokens   int     `json:"maxTokens"`
}

type GPTRequest struct {
	ModelUri          string            `json:"modelUri"`
	CompletionOptions CompletionOptions `json:"completionOptions"`
	Messages          []Message         `json:"messages"`
}

func askYandexGPT(userText string) (string, error) {
	apiKey := os.Getenv("YANDEX_API_KEY")
	folderID := os.Getenv("YANDEX_FOLDER_ID")

	url := "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

	requestBody := GPTRequest{
		ModelUri: fmt.Sprintf("gpt://%s/yandexgpt-lite", folderID),
		CompletionOptions: CompletionOptions{
			Stream:      false,
			Temperature: 0.7,
			MaxTokens:   100,
		},
		Messages: []Message{
			{Role: "user", Text: userText},
		},
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", err
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", err
	}
	req.Header.Set("Authorization", "Api-Key "+apiKey)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("x-folder-id", folderID)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)

	var result map[string]interface{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return "", err
	}

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
	text := "ü§ñ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
	if r, ok := result["result"].(map[string]interface{}); ok {
		if alternatives, ok := r["alternatives"].([]interface{}); ok && len(alternatives) > 0 {
			msg := alternatives[0].(map[string]interface{})["message"].(map[string]interface{})
			text = msg["text"].(string)
		}
	}

	return text, nil
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	log.Printf("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		userMessage := update.Message.Text
		replyText, err := askYandexGPT(userMessage)
		if err != nil {
			replyText = "‚ö†Ô∏è –û—à–∏–±–∫–∞: " + err.Error()
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, replyText)
		bot.Send(msg)
	}
}
